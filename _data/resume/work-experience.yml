
          
- title: Work Experience
  layout: list
  content:
    - layout: top-middle
      title: 스마일게이트 메가포트
      sub_title: |
        코드 품질 향상 TF. 백엔드 개발자
      caption: 2023.06 - 현재
      quote: |
        2023.06 ~ 현재
        <br>
        온라인 게임 서비스를 개발 및 서비스하는 기업에서 기술 지원 서비스 개발 및 코드 품질 향상을 위한 업무를 담당합니다.
      description: |
        * **설정 중앙화 시스템 구축**
          * Central Dogma를 이용한 설정 중앙화 서비스 구축으로 정적 리소스 수정으로 인한 장애 0건으로 감소
          * 장애 대응 시간 단축
          * 이벤트 브로드캐스팅을 활용해 설정값 실시간 동기화 및 운영 자동화 구현
          * UI 접근만 가능했던 설정 관리 기능들을 API로 제공하여 서비스 접근성 향상
          * 비개발 직군의 업무 방식 지원을 위해 Excel/JSON과 properties 간 자동 변환 기능 추가

        * **공통 모듈 및 표준화된 개발 환경 구축**
          * 공통 모듈 개발 및 백엔드 서비스 템플릿화를 통한 프로젝트 표준 모델 생성
          * 토큰 인증, Feign 등 범용적으로 적용되는 표준 라이브러리 제공
          * 벌크 캐싱, Redis 기반 글로벌락, 커스텀 StreamUtils 등 다양한 기능 제공
          * 사내 표준 설정 변경으로 인한 영향도 최소화 및 스택 분리로 인한 프로젝트 파편화 감소
        
        * **테스트코드 도입 및 빌드 프로세스 추가 - 코드 품질 관리**
          * 필요성을 인지하고 있으나 도입 허들로 인해 미뤄져 왔던 테스트 코드 작성 문화를 추진
          * 테스트 작성에 대한 허들을 낮추기 위해 Fixture 오픈소스를 활용, 테스트 프레임워크를 구현하여 읽기 편하고 의도가 명확한 테스트를 작성하도록 지원
          * unit, integration, E2E 코드 샘플 제공 및 가이드 작성
          * CI Template에 소나큐브, 테스트 분석 리포트, Issue 자동 추출을 추가하여 코드 품질 모니터링 자동화
      tech_stack: Java17, Java21, Kotlin, SpringBoot, SpringCloud, MSA, MongoDB, Redis, LocalCache, MySQL, Docker, Nginx, Pinpoint, ELK
      
    - layout: top-middle
      title: 스마일게이트 메가포트
      sub_title: |
        공통서비스개발팀. 백엔드 개발자
      caption: 2022.07 - 2023.06
      quote: |
        2022.07 ~ 2023.06
        <br>
        레거시 게임 전시 서비스의 아키텍처를 재설계하여 성능과 확장성을 개선하는 프로젝트를 담당했습니다.
      description: |
        * **아키텍처 재설계 및 성능 개선**
          * Event Driven Architecture와 CQRS 적용으로 강결합된 서비스간 책임 분리
          * Read DB를 구축하여 조회 시간 30%로 단축
          * 모노 레포에서 공통, 퍼블리싱, 전시 멀티 모듈로 분리하여 빌드 시간 단축 및 모듈별 코드 경량화
          * 비즈니스 로직 기반 테스트 작성과 불필요한 코드 제거로 코드라인 50% 이상 감소, 마이그레이션 과정 이슈 최소화

        * **모바일 개인화 전시 BFF 외부 연동 성능 최적화**
          * Virtual Thread 도입으로 BFF 서비스의 1요청당 80개의 외부 연결(db/api) 성능 요건 달성
          * platform thread 대비 TPS x10, 응답시간 30sec → 180ms, CPU useage 3% → 35%로 개선
          * Hibernate TypeCasting과 MySQL의 묵시적 형변환으로 인한 슬로우 쿼리 이슈 해결
          * 쿼리 실행 시간, throughput 개선 및 hibernate ddl 옵션 설정을 통한 재발 방지 계획 수립

        * **캐싱 최적화 및 성능 개선**
          * Redis pipelining을 통한 벌크 푸시 기능 개선 - 다중 유저 푸시 발송시 조회 시간 1/100로 개선
          * 캐시 key 재설계로 hit rate 증가 및 메모리 사이즈를 조정해 fullGC 방지
          * Throughput 220% 증가, CPU Usage 50% 감소
      tech_stack: Java, Spring Boot, JPA, Redis, MySQL, Event Driven Architecture, CQRS, Virtual Thread